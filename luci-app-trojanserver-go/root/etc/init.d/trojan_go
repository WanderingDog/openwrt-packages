#!/bin/sh /etc/rc.common
#
# Copyright (C) 2015 OpenWrt-dist
#
# This is free software, licensed under the GNU General Public License v3.
# See /LICENSE for more information.
#

START=50
USE_PROCD=1
PROG=/usr/bin/trojan-go/trojan-go

CONFIG=trojan_go
CONFIG_FILE=/etc/config/$CONFIG
RUN_CONFIG_FILE=/var/etc/$CONFIG.json
PID_FILE=/var/run/$CONFIG.pid
LOG_FILE=/var/log/$CONFIG.log


alias echo_date='echo $(date +%Y-%m-%d\ %X):'

uci_get_by_type() {
	local index=0
	if [ -n $4 ]; then
		index=$4
	fi
	local ret=$(uci get $CONFIG.@$1[$index].$2 2>/dev/null)
	echo ${ret:=$3}
}

is_true() {
	case $1 in
		1|on|true|yes|enabled) echo 0;;
		*) echo 1;;
	esac
}

load_config() {
	ENABLED=$(uci_get_by_type server enable)
	return $(is_true $ENABLED)
}


start_service() {	
        /etc/init.d/trojan_go stop
        gen_config_file "server"
	! load_config && exit 0
	procd_open_instance
	procd_set_param command "$PROG" -config $RUN_CONFIG_FILE
	procd_close_instance
}


gen_config_file() {
	echo_date  $(uci_get_by_type server password)
	cat <<-EOF >$RUN_CONFIG_FILE
	{
		"run_type":"server",
		"local_addr":"0.0.0.0",
		"local_port": $(uci_get_by_type server server_port),
		"remote_addr": "$(uci_get_by_type server remote_server_address)",
		"remote_port": $(uci_get_by_type server remote_server_port),
		"dns":["8.8.8.8","8.8.4.4","114.114.114.114"],
		"buffer_size":64,		
		"tcp":{	
			"no_delay": true,
			"keep_alive": false,
			"reuse_port": false,
			"fast_open": false
		},
		"password": 
			[
				$(uci_get_by_type server password)
			],
		"log_level":1,
		"LogFile":"$LOG_FILE",
		"ssl":{
			"cert":"$(uci_get_by_type server ssl_cert_path)",
			"key":"$(uci_get_by_type server ssl_key_path)",
 			"cipher": "TLS_RSA_WITH_3DES_EDE_CBC_SHA:TLS_RSA_WITH_AES_128_CBC_SHA:TLS_RSA_WITH_AES_256_CBC_SHA:TLS_RSA_WITH_AES_128_GCM_SHA256:TLS_RSA_WITH_AES_256_GCM_SHA384:TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA:TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA:TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA:TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA:TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256:TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384:TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256:TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384:TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256:TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256",
	        	"cipher_tls13": "TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256:TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256:TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256",
        		"fingerprint": "auto",
        		"sni":"*.gfw.com",
	        	"verify_hostname":true
		},
		"enable":$(uci_get_by_type server enable)
		
	}
EOF
}


add_rule() {
    serverport=$(uci_get_by_type server server_port)
    uci set firewall.trojan_go.dest_port=$serverport && uci commit firewall &&  /etc/init.d/firewall restart
}

del_rule() {
    serverport=$(uci_get_by_type server server_port)
}

start() {
	/etc/init.d/trojan_go stop
	echo_date Start create config.json
	gen_config_file "server"
	! load_config && exit 0
	start_server	
	
}
service_triggers(){	
	procd_add_reload_trigger "trojan_go"
}
stop_service() {
	# echo_date Kill process..
	# killall trojan-go
	# agen_config_file "server"
    	rm -f $LOG_FILE
}
reload_service() {
	/etc/init.d/trojan_go stop
	gen_config_file "server"
	/etc/init.d/trojan_go start
}
